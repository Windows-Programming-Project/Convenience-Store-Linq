#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Convenience_Store_Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ConvenienceStore")]
	public partial class CStoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDetail(Detail instance);
    partial void UpdateDetail(Detail instance);
    partial void DeleteDetail(Detail instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertManuafacture(Manuafacture instance);
    partial void UpdateManuafacture(Manuafacture instance);
    partial void DeleteManuafacture(Manuafacture instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    #endregion
		
		public CStoreDataContext() : 
				base(global::Convenience_Store_Linq.Properties.Settings.Default.ConvenienceStoreConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CStoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CStoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CStoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CStoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Detail> Details
		{
			get
			{
				return this.GetTable<Detail>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Manuafacture> Manuafactures
		{
			get
			{
				return this.GetTable<Manuafacture>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _aUsername;
		
		private string _aPassword;
		
		private string _eID;
		
		private string _aEmail;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaUsernameChanging(string value);
    partial void OnaUsernameChanged();
    partial void OnaPasswordChanging(string value);
    partial void OnaPasswordChanged();
    partial void OneIDChanging(string value);
    partial void OneIDChanged();
    partial void OnaEmailChanging(string value);
    partial void OnaEmailChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Account()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aUsername", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string aUsername
		{
			get
			{
				return this._aUsername;
			}
			set
			{
				if ((this._aUsername != value))
				{
					this.OnaUsernameChanging(value);
					this.SendPropertyChanging();
					this._aUsername = value;
					this.SendPropertyChanged("aUsername");
					this.OnaUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aPassword", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string aPassword
		{
			get
			{
				return this._aPassword;
			}
			set
			{
				if ((this._aPassword != value))
				{
					this.OnaPasswordChanging(value);
					this.SendPropertyChanging();
					this._aPassword = value;
					this.SendPropertyChanged("aPassword");
					this.OnaPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string eID
		{
			get
			{
				return this._eID;
			}
			set
			{
				if ((this._eID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneIDChanging(value);
					this.SendPropertyChanging();
					this._eID = value;
					this.SendPropertyChanged("eID");
					this.OneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aEmail", DbType="NVarChar(20)")]
		public string aEmail
		{
			get
			{
				return this._aEmail;
			}
			set
			{
				if ((this._aEmail != value))
				{
					this.OnaEmailChanging(value);
					this.SendPropertyChanging();
					this._aEmail = value;
					this.SendPropertyChanged("aEmail");
					this.OnaEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Account", Storage="_Employee", ThisKey="eID", OtherKey="eID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._eID = value.eID;
					}
					else
					{
						this._eID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _cID;
		
		private string _cName;
		
		private System.Nullable<double> _cTotalpay;
		
		private string _cPhoneNum;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncIDChanging(string value);
    partial void OncIDChanged();
    partial void OncNameChanging(string value);
    partial void OncNameChanged();
    partial void OncTotalpayChanging(System.Nullable<double> value);
    partial void OncTotalpayChanged();
    partial void OncPhoneNumChanging(string value);
    partial void OncPhoneNumChanged();
    #endregion
		
		public Customer()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string cName
		{
			get
			{
				return this._cName;
			}
			set
			{
				if ((this._cName != value))
				{
					this.OncNameChanging(value);
					this.SendPropertyChanging();
					this._cName = value;
					this.SendPropertyChanged("cName");
					this.OncNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cTotalpay", DbType="Float")]
		public System.Nullable<double> cTotalpay
		{
			get
			{
				return this._cTotalpay;
			}
			set
			{
				if ((this._cTotalpay != value))
				{
					this.OncTotalpayChanging(value);
					this.SendPropertyChanging();
					this._cTotalpay = value;
					this.SendPropertyChanged("cTotalpay");
					this.OncTotalpayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cPhoneNum", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string cPhoneNum
		{
			get
			{
				return this._cPhoneNum;
			}
			set
			{
				if ((this._cPhoneNum != value))
				{
					this.OncPhoneNumChanging(value);
					this.SendPropertyChanging();
					this._cPhoneNum = value;
					this.SendPropertyChanged("cPhoneNum");
					this.OncPhoneNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="cID", OtherKey="cID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Detail")]
	public partial class Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _iID;
		
		private string _pID;
		
		private System.Nullable<int> _dAmount;
		
		private System.Nullable<double> _dPrice;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(string value);
    partial void OniIDChanged();
    partial void OnpIDChanging(string value);
    partial void OnpIDChanged();
    partial void OndAmountChanging(System.Nullable<int> value);
    partial void OndAmountChanged();
    partial void OndPriceChanging(System.Nullable<double> value);
    partial void OndPriceChanged();
    #endregion
		
		public Detail()
		{
			this._Invoice = default(EntityRef<Invoice>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pID
		{
			get
			{
				return this._pID;
			}
			set
			{
				if ((this._pID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpIDChanging(value);
					this.SendPropertyChanging();
					this._pID = value;
					this.SendPropertyChanged("pID");
					this.OnpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dAmount", DbType="Int")]
		public System.Nullable<int> dAmount
		{
			get
			{
				return this._dAmount;
			}
			set
			{
				if ((this._dAmount != value))
				{
					this.OndAmountChanging(value);
					this.SendPropertyChanging();
					this._dAmount = value;
					this.SendPropertyChanged("dAmount");
					this.OndAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dPrice", DbType="Float")]
		public System.Nullable<double> dPrice
		{
			get
			{
				return this._dPrice;
			}
			set
			{
				if ((this._dPrice != value))
				{
					this.OndPriceChanging(value);
					this.SendPropertyChanging();
					this._dPrice = value;
					this.SendPropertyChanged("dPrice");
					this.OndPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Detail", Storage="_Invoice", ThisKey="iID", OtherKey="iID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Details.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Details.Add(this);
						this._iID = value.iID;
					}
					else
					{
						this._iID = default(string);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail", Storage="_Product", ThisKey="pID", OtherKey="pID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Details.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Details.Add(this);
						this._pID = value.pID;
					}
					else
					{
						this._pID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _eID;
		
		private string _eName;
		
		private System.Nullable<System.DateTime> _eBirthdate;
		
		private System.Nullable<bool> _eGender;
		
		private string _ePhone;
		
		private string _eAddress;
		
		private string _ePosition;
		
		private System.Nullable<double> _eSalary;
		
		private System.Data.Linq.Binary _eImage;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OneIDChanging(string value);
    partial void OneIDChanged();
    partial void OneNameChanging(string value);
    partial void OneNameChanged();
    partial void OneBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OneBirthdateChanged();
    partial void OneGenderChanging(System.Nullable<bool> value);
    partial void OneGenderChanged();
    partial void OnePhoneChanging(string value);
    partial void OnePhoneChanged();
    partial void OneAddressChanging(string value);
    partial void OneAddressChanged();
    partial void OnePositionChanging(string value);
    partial void OnePositionChanged();
    partial void OneSalaryChanging(System.Nullable<double> value);
    partial void OneSalaryChanged();
    partial void OneImageChanging(System.Data.Linq.Binary value);
    partial void OneImageChanged();
    #endregion
		
		public Employee()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string eID
		{
			get
			{
				return this._eID;
			}
			set
			{
				if ((this._eID != value))
				{
					this.OneIDChanging(value);
					this.SendPropertyChanging();
					this._eID = value;
					this.SendPropertyChanged("eID");
					this.OneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string eName
		{
			get
			{
				return this._eName;
			}
			set
			{
				if ((this._eName != value))
				{
					this.OneNameChanging(value);
					this.SendPropertyChanging();
					this._eName = value;
					this.SendPropertyChanged("eName");
					this.OneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eBirthdate", DbType="Date")]
		public System.Nullable<System.DateTime> eBirthdate
		{
			get
			{
				return this._eBirthdate;
			}
			set
			{
				if ((this._eBirthdate != value))
				{
					this.OneBirthdateChanging(value);
					this.SendPropertyChanging();
					this._eBirthdate = value;
					this.SendPropertyChanged("eBirthdate");
					this.OneBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eGender", DbType="Bit")]
		public System.Nullable<bool> eGender
		{
			get
			{
				return this._eGender;
			}
			set
			{
				if ((this._eGender != value))
				{
					this.OneGenderChanging(value);
					this.SendPropertyChanging();
					this._eGender = value;
					this.SendPropertyChanged("eGender");
					this.OneGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ePhone", DbType="NVarChar(15)")]
		public string ePhone
		{
			get
			{
				return this._ePhone;
			}
			set
			{
				if ((this._ePhone != value))
				{
					this.OnePhoneChanging(value);
					this.SendPropertyChanging();
					this._ePhone = value;
					this.SendPropertyChanged("ePhone");
					this.OnePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eAddress", DbType="NVarChar(50)")]
		public string eAddress
		{
			get
			{
				return this._eAddress;
			}
			set
			{
				if ((this._eAddress != value))
				{
					this.OneAddressChanging(value);
					this.SendPropertyChanging();
					this._eAddress = value;
					this.SendPropertyChanged("eAddress");
					this.OneAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ePosition", DbType="NVarChar(40)")]
		public string ePosition
		{
			get
			{
				return this._ePosition;
			}
			set
			{
				if ((this._ePosition != value))
				{
					this.OnePositionChanging(value);
					this.SendPropertyChanging();
					this._ePosition = value;
					this.SendPropertyChanged("ePosition");
					this.OnePositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eSalary", DbType="Float")]
		public System.Nullable<double> eSalary
		{
			get
			{
				return this._eSalary;
			}
			set
			{
				if ((this._eSalary != value))
				{
					this.OneSalaryChanging(value);
					this.SendPropertyChanging();
					this._eSalary = value;
					this.SendPropertyChanged("eSalary");
					this.OneSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary eImage
		{
			get
			{
				return this._eImage;
			}
			set
			{
				if ((this._eImage != value))
				{
					this.OneImageChanging(value);
					this.SendPropertyChanging();
					this._eImage = value;
					this.SendPropertyChanged("eImage");
					this.OneImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Account", Storage="_Accounts", ThisKey="eID", OtherKey="eID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Invoice", Storage="_Invoices", ThisKey="eID", OtherKey="eID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _iID;
		
		private string _eID;
		
		private string _cID;
		
		private System.Nullable<System.DateTime> _iDate;
		
		private System.Nullable<double> _iTotalpay;
		
		private EntitySet<Detail> _Details;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniIDChanging(string value);
    partial void OniIDChanged();
    partial void OneIDChanging(string value);
    partial void OneIDChanged();
    partial void OncIDChanging(string value);
    partial void OncIDChanged();
    partial void OniDateChanging(System.Nullable<System.DateTime> value);
    partial void OniDateChanged();
    partial void OniTotalpayChanging(System.Nullable<double> value);
    partial void OniTotalpayChanged();
    #endregion
		
		public Invoice()
		{
			this._Details = new EntitySet<Detail>(new Action<Detail>(this.attach_Details), new Action<Detail>(this.detach_Details));
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string iID
		{
			get
			{
				return this._iID;
			}
			set
			{
				if ((this._iID != value))
				{
					this.OniIDChanging(value);
					this.SendPropertyChanging();
					this._iID = value;
					this.SendPropertyChanged("iID");
					this.OniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string eID
		{
			get
			{
				return this._eID;
			}
			set
			{
				if ((this._eID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneIDChanging(value);
					this.SendPropertyChanging();
					this._eID = value;
					this.SendPropertyChanged("eID");
					this.OneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> iDate
		{
			get
			{
				return this._iDate;
			}
			set
			{
				if ((this._iDate != value))
				{
					this.OniDateChanging(value);
					this.SendPropertyChanging();
					this._iDate = value;
					this.SendPropertyChanged("iDate");
					this.OniDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iTotalpay", DbType="Float")]
		public System.Nullable<double> iTotalpay
		{
			get
			{
				return this._iTotalpay;
			}
			set
			{
				if ((this._iTotalpay != value))
				{
					this.OniTotalpayChanging(value);
					this.SendPropertyChanging();
					this._iTotalpay = value;
					this.SendPropertyChanged("iTotalpay");
					this.OniTotalpayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Detail", Storage="_Details", ThisKey="iID", OtherKey="iID")]
		public EntitySet<Detail> Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				this._Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="cID", OtherKey="cID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._cID = value.cID;
					}
					else
					{
						this._cID = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Invoice", Storage="_Employee", ThisKey="eID", OtherKey="eID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._eID = value.eID;
					}
					else
					{
						this._eID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manuafacture")]
	public partial class Manuafacture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _mID;
		
		private string _mName;
		
		private string _mLocation;
		
		private EntitySet<Supplier> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmIDChanging(string value);
    partial void OnmIDChanged();
    partial void OnmNameChanging(string value);
    partial void OnmNameChanged();
    partial void OnmLocationChanging(string value);
    partial void OnmLocationChanged();
    #endregion
		
		public Manuafacture()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string mID
		{
			get
			{
				return this._mID;
			}
			set
			{
				if ((this._mID != value))
				{
					this.OnmIDChanging(value);
					this.SendPropertyChanging();
					this._mID = value;
					this.SendPropertyChanged("mID");
					this.OnmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mName", DbType="NVarChar(20)")]
		public string mName
		{
			get
			{
				return this._mName;
			}
			set
			{
				if ((this._mName != value))
				{
					this.OnmNameChanging(value);
					this.SendPropertyChanging();
					this._mName = value;
					this.SendPropertyChanged("mName");
					this.OnmNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mLocation", DbType="NVarChar(40)")]
		public string mLocation
		{
			get
			{
				return this._mLocation;
			}
			set
			{
				if ((this._mLocation != value))
				{
					this.OnmLocationChanging(value);
					this.SendPropertyChanging();
					this._mLocation = value;
					this.SendPropertyChanged("mLocation");
					this.OnmLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manuafacture_Supplier", Storage="_Suppliers", ThisKey="mID", OtherKey="mID")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Manuafacture = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Manuafacture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _pID;
		
		private string _pName;
		
		private double _pPrice;
		
		private string _tID;
		
		private System.Data.Linq.Binary _pImage;
		
		private string _batchID;
		
		private EntitySet<Detail> _Details;
		
		private EntityRef<Stock> _Stock;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpIDChanging(string value);
    partial void OnpIDChanged();
    partial void OnpNameChanging(string value);
    partial void OnpNameChanged();
    partial void OnpPriceChanging(double value);
    partial void OnpPriceChanged();
    partial void OntIDChanging(string value);
    partial void OntIDChanged();
    partial void OnpImageChanging(System.Data.Linq.Binary value);
    partial void OnpImageChanged();
    partial void OnbatchIDChanging(string value);
    partial void OnbatchIDChanged();
    #endregion
		
		public Product()
		{
			this._Details = new EntitySet<Detail>(new Action<Detail>(this.attach_Details), new Action<Detail>(this.detach_Details));
			this._Stock = default(EntityRef<Stock>);
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pID
		{
			get
			{
				return this._pID;
			}
			set
			{
				if ((this._pID != value))
				{
					this.OnpIDChanging(value);
					this.SendPropertyChanging();
					this._pID = value;
					this.SendPropertyChanged("pID");
					this.OnpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string pName
		{
			get
			{
				return this._pName;
			}
			set
			{
				if ((this._pName != value))
				{
					this.OnpNameChanging(value);
					this.SendPropertyChanging();
					this._pName = value;
					this.SendPropertyChanged("pName");
					this.OnpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pPrice", DbType="Float NOT NULL")]
		public double pPrice
		{
			get
			{
				return this._pPrice;
			}
			set
			{
				if ((this._pPrice != value))
				{
					this.OnpPriceChanging(value);
					this.SendPropertyChanging();
					this._pPrice = value;
					this.SendPropertyChanged("pPrice");
					this.OnpPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string tID
		{
			get
			{
				return this._tID;
			}
			set
			{
				if ((this._tID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntIDChanging(value);
					this.SendPropertyChanging();
					this._tID = value;
					this.SendPropertyChanged("tID");
					this.OntIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pImage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary pImage
		{
			get
			{
				return this._pImage;
			}
			set
			{
				if ((this._pImage != value))
				{
					this.OnpImageChanging(value);
					this.SendPropertyChanging();
					this._pImage = value;
					this.SendPropertyChanged("pImage");
					this.OnpImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_batchID", DbType="NVarChar(20)")]
		public string batchID
		{
			get
			{
				return this._batchID;
			}
			set
			{
				if ((this._batchID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbatchIDChanging(value);
					this.SendPropertyChanging();
					this._batchID = value;
					this.SendPropertyChanged("batchID");
					this.OnbatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Detail", Storage="_Details", ThisKey="pID", OtherKey="pID")]
		public EntitySet<Detail> Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				this._Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Product", Storage="_Stock", ThisKey="batchID", OtherKey="batchID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._batchID = value.batchID;
					}
					else
					{
						this._batchID = default(string);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product", Storage="_Type", ThisKey="tID", OtherKey="tID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._tID = value.tID;
					}
					else
					{
						this._tID = default(string);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _batchID;
		
		private System.Nullable<System.DateTime> _imDate;
		
		private System.Nullable<int> _amountofProduct;
		
		private string _sID;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbatchIDChanging(string value);
    partial void OnbatchIDChanged();
    partial void OnimDateChanging(System.Nullable<System.DateTime> value);
    partial void OnimDateChanged();
    partial void OnamountofProductChanging(System.Nullable<int> value);
    partial void OnamountofProductChanged();
    partial void OnsIDChanging(string value);
    partial void OnsIDChanged();
    #endregion
		
		public Stock()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_batchID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string batchID
		{
			get
			{
				return this._batchID;
			}
			set
			{
				if ((this._batchID != value))
				{
					this.OnbatchIDChanging(value);
					this.SendPropertyChanging();
					this._batchID = value;
					this.SendPropertyChanged("batchID");
					this.OnbatchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> imDate
		{
			get
			{
				return this._imDate;
			}
			set
			{
				if ((this._imDate != value))
				{
					this.OnimDateChanging(value);
					this.SendPropertyChanging();
					this._imDate = value;
					this.SendPropertyChanged("imDate");
					this.OnimDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amountofProduct", DbType="Int")]
		public System.Nullable<int> amountofProduct
		{
			get
			{
				return this._amountofProduct;
			}
			set
			{
				if ((this._amountofProduct != value))
				{
					this.OnamountofProductChanging(value);
					this.SendPropertyChanging();
					this._amountofProduct = value;
					this.SendPropertyChanged("amountofProduct");
					this.OnamountofProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string sID
		{
			get
			{
				return this._sID;
			}
			set
			{
				if ((this._sID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsIDChanging(value);
					this.SendPropertyChanging();
					this._sID = value;
					this.SendPropertyChanged("sID");
					this.OnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Product", Storage="_Products", ThisKey="batchID", OtherKey="batchID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Stock", Storage="_Supplier", ThisKey="sID", OtherKey="sID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._sID = value.sID;
					}
					else
					{
						this._sID = default(string);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sID;
		
		private string _mID;
		
		private string _sName;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Manuafacture> _Manuafacture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsIDChanging(string value);
    partial void OnsIDChanged();
    partial void OnmIDChanging(string value);
    partial void OnmIDChanged();
    partial void OnsNameChanging(string value);
    partial void OnsNameChanged();
    #endregion
		
		public Supplier()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Manuafacture = default(EntityRef<Manuafacture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sID
		{
			get
			{
				return this._sID;
			}
			set
			{
				if ((this._sID != value))
				{
					this.OnsIDChanging(value);
					this.SendPropertyChanging();
					this._sID = value;
					this.SendPropertyChanged("sID");
					this.OnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string mID
		{
			get
			{
				return this._mID;
			}
			set
			{
				if ((this._mID != value))
				{
					if (this._Manuafacture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmIDChanging(value);
					this.SendPropertyChanging();
					this._mID = value;
					this.SendPropertyChanged("mID");
					this.OnmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sName", DbType="NVarChar(20)")]
		public string sName
		{
			get
			{
				return this._sName;
			}
			set
			{
				if ((this._sName != value))
				{
					this.OnsNameChanging(value);
					this.SendPropertyChanging();
					this._sName = value;
					this.SendPropertyChanged("sName");
					this.OnsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Stock", Storage="_Stocks", ThisKey="sID", OtherKey="sID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manuafacture_Supplier", Storage="_Manuafacture", ThisKey="mID", OtherKey="mID", IsForeignKey=true)]
		public Manuafacture Manuafacture
		{
			get
			{
				return this._Manuafacture.Entity;
			}
			set
			{
				Manuafacture previousValue = this._Manuafacture.Entity;
				if (((previousValue != value) 
							|| (this._Manuafacture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manuafacture.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Manuafacture.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._mID = value.mID;
					}
					else
					{
						this._mID = default(string);
					}
					this.SendPropertyChanged("Manuafacture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _tID;
		
		private string _tName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntIDChanging(string value);
    partial void OntIDChanged();
    partial void OntNameChanging(string value);
    partial void OntNameChanged();
    #endregion
		
		public Type()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string tID
		{
			get
			{
				return this._tID;
			}
			set
			{
				if ((this._tID != value))
				{
					this.OntIDChanging(value);
					this.SendPropertyChanging();
					this._tID = value;
					this.SendPropertyChanged("tID");
					this.OntIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string tName
		{
			get
			{
				return this._tName;
			}
			set
			{
				if ((this._tName != value))
				{
					this.OntNameChanging(value);
					this.SendPropertyChanging();
					this._tName = value;
					this.SendPropertyChanged("tName");
					this.OntNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Product", Storage="_Products", ThisKey="tID", OtherKey="tID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
}
#pragma warning restore 1591
